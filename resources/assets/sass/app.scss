@import './vendor/bulma/bulma';
@import './vendor/mdi/materialdesignicons';

@import './animations';

html {
	margin: 0;
	padding: 0;
	height: 100vh;
}

body {
	margin: 0;
	padding: 0;
	width: 100vw;
	min-height: 100vh;
}

body {
	display: flex;
	min-height: 100vh;
	flex-direction: column;
	justify-content: space-between;

	color: $white-ter;
	background-color: #37474F;
	background-image: url('/assets/img/pattern-d-10.png');
	background-position: 0 0;
	animation: bodyBg 25s linear infinite;
	overflow: auto;
}

.navbar-link {

	.mdi {
		width: 1.25rem;
	}
}

.app {
	flex: 1;
}

.footer {

	opacity: 0.33;
	transition: 250ms all ease-in-out;

	a {
		color: $white-ter;
	}

	.mdi-heart {
		color: #EC407A;

		&:before {
			-webkit-animation: beat 1.5s infinite ease;
			animation: beat 1.5s infinite ease;
		}
	}

	&:hover {
		opacity: 1;

		a {
			color: $blue;
		}
	}
}

.logo {
	margin: 0 auto 1rem;
	display: block;

	width: 100%;
	height: 280px;

	background-image: url('/assets/img/logo.png');
	background-size: 100%;
	background-repeat: no-repeat;
	background-position: center;
	animation: /*logoEntrance 1s cubic-bezier(0.075, 0.82, 0.165, 1) forwards,*/ logoFloat 5s ease-in-out /*1s*/ infinite;
}

.is-slanted {
	-webkit-transform: skewX(-20deg);
	-ms-transform: skewX(-20deg);
	transform: skewX(-20deg);

	& > .slanted-content {
		-webkit-transform: skewX(20deg);
		-ms-transform: skewX(20deg);
		transform: skewX(20deg);
		display: inline-block;
	}

	&.slanted-reverse {
		-webkit-transform: skewX(20deg);
		-ms-transform: skewX(20deg);
		transform: skewX(20deg);

		& > .slanted-content {
			-webkit-transform: skewX(-20deg);
			-ms-transform: skewX(-20deg);
			transform: skewX(-20deg);
			display: inline-block;
		}
	}
}

/**
* Bulma does not have any spacing helper classes. How shitty is that?
* "I don't want to bloat Bulma with helpers" the creator says...
* What? Fine, I will make my own!
*/
$sizeUnit: rem;
$marginKey: 'has-margin';
$paddingKey: 'has-padding';
$separator: '-';
$sizes: (
    ('none', 0),
    ('xxs', 0.125),
    ('xs', 0.25),
    ('sm', 0.5),
    ('md', 1),
    ('lg', 2),
    ('xl', 4),
    ('xxl', 8),
);
$positions: (
    ('t', 'top'),
    ('r', 'right'),
    ('b', 'bottom'),
    ('l', 'left')
);

@function sizeValue($key, $value) {
    @return if($key == 'none', 0, $value + $sizeUnit);
}

@each $size in $sizes {
    $sizeKey: nth($size, 1);
    $sizeValue: nth($size, 2);
    .#{$marginKey}#{$separator}#{$sizeKey} {
        margin: sizeValue($sizeKey, $sizeValue);
    }
    .#{$paddingKey}#{$separator}#{$sizeKey} {
        padding: sizeValue($sizeKey, $sizeValue);
    }
    @each $position in $positions {
        $posKey: nth($position, 1);
        $posValue: nth($position, 2);
        .#{$marginKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            margin-#{$posValue}: sizeValue($sizeKey, $sizeValue);
        }
        .#{$paddingKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            padding-#{$posValue}: sizeValue($sizeKey, $sizeValue);
        }
    }
}